<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Role;
use AppBundle\Entity\User;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * LoanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LoanRepository extends \Doctrine\ORM\EntityRepository
{
    public function listPage($page, $pageLimit = 20, $condition)
    {
        if (!$condition['now_user'] instanceof User) {
            return [
                'count' => 0,
                'pageCount' => 0,
                'data' => []
            ];
        }

        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('l')
            ->from('AppBundle:Loan', 'l')
            ->leftJoin('l.enterprise', 'e', 'WITH');
        if (!empty($condition['progresses'])) {
            $queryBuilder->andWhere($queryBuilder->expr()->in('l.progress', $condition['progresses']));
//            $queryBuilder->setParameter('progresses', $condition['progresses']);
        }
        if ($condition['now_user']->getRole()->isRole(Role::ROLE_CUSTOMER_MANAGER)) {
            $queryBuilder->andWhere('e.roleA = :user OR e.roleB = :user');
            $queryBuilder->setParameter('user', $condition['now_user']);
        } elseif ($condition['now_user']->getRole()->isRole(Role::ROLE_PRESIDENT)) {
            $queryBuilder->andWhere('l.bank = :bank OR e.bank = :bank');
            $queryBuilder->setParameter('bank', $condition['now_user']->getBank());
        }
        $query = $queryBuilder->orderBy('l.id', 'DESC')->getQuery();
        $query->setFirstResult(($page - 1) * $pageLimit)->setMaxResults($pageLimit);
        $paginator = new Paginator($query, $fetchJoinCollection = true);

        $result = [
            'count' => $paginator->count(),
            'pageCount' => ceil($paginator->count() / $pageLimit),
            'data' => $paginator->getIterator()
        ];
        return $result;

    }
}
